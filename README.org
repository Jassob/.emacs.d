# -*- indent-tabs-mode: nil; -*-
#+TITLE: Jassob's Emacs configuration
#+DATE: <2018-01-19 Fri>

* About this file
  This file is intended to be the configurable point of my Emacs
  configuration. By enabling some modules we can create specific
  configurations for different use-cases.

  The complete configuration is very much inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's
  Emacs Configuration]], especially =org-mode=, with some stolen bits
  and pieces from both [[http://spacemacs.org][Spacemacs]]/[[https://github.com/TheBB/spaceline][Spaceline]] and [[https://github.com/hlissner/.emacs.d][hlissner's Emacs
  config]].

  This file generates my config by tangling all source code blocks in
  the text to a single elisp-file.

* Setup
  There is a Makefile that tangles everything that needs to be tangled.

  1. Clone this repository to =/.emacs.d/= (backup your own configuration first!)
  2. Modify code and module list in =README.org= (this file).
  3. Run ~make all~ in =~/.emacs.d/
  4. Profit!

* Initialization

  Before doing anything else, let us disable the garbage collector
  during setup, this saves us some time and we're not likely to run in
  to memory issues while setting everything up.

  #+begin_src emacs-lisp :tangle init.el
    (setq gc-cons-threshold 64000000)
    (add-hook 'after-init-hook
              ;; restore after startup
              #'(lambda () (setq gc-cons-threshold 800000)))
  #+end_src

  Load the core configuration to setup stuff.

  #+begin_src emacs-lisp :tangle init.el
    ;; Load core setup file
    (load (concat user-emacs-directory "core.el"))
  #+end_src

* Modules
  [[core.][core.org]] defines a simple module system where the different features
  reside in the =available-modules/MODULE/README.org= and these
  README's then define a =module.el= file in the same directory.

  First we add which modules that should be considered essential and
  therefore always loaded.

  #+begin_src emacs-lisp :tangle init.el
    (setq core/essential-modules '("git" "nix" "org"))
  #+end_src

  Customize =enabled-modules= to select which modules to load upon
  startup.

  We then load our modules before we let Emacs take over and start up
  everything else.

  #+begin_src emacs-lisp :tangle init.el
    (add-hook 'after-init-hook #'core/load-modules t)
  #+end_src

  Finally, we load our own settings now that the modules are loaded.

  #+begin_src emacs-lisp :tangle init.el
    (add-hook 'after-init-hook #'(lambda () (load (concat user-emacs-directory "personal.el"))) t)
  #+end_src

* TODO Add linters and formatters to common-code-mode
  Variable =buffer-file-name= could be used together with a asynch
  shell command.
* TODO Add work configuration
  Add work config where browse-url opens links in Chrome etc.
* TODO Check out byte-compiled errors
  When the code is byte-compiled there are some stuff that is not
  found, might be worth investigating whether (eval-and-compile) works
  better.
* TODO Integrate better with Nix
  [[https://matthewbauer.us/bauer/#emacs][This]] is very interesting, maybe something I might take advantage of
  myself?
* TODO Move common-code-mode into prog-mode
