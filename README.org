# -*- indent-tabs-mode: nil; -*-
#+TITLE: Jassob's Emacs configuration
#+DATE: <2018-01-19 Fri>

* About this file
  This file is intended to be the configurable point of my Emacs
  configuration. By enabling some modules we can create specific
  configurations for different use-cases.

  The complete configuration is very much inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's
  Emacs Configuration]], especially =org-mode=, with some stolen bits
  and pieces from both [[http://spacemacs.org][Spacemacs]]/[[https://github.com/TheBB/spaceline][Spaceline]] and [[https://github.com/hlissner/.emacs.d][hlissner's Emacs
  config]].

  This file generates my config by tangling all source code blocks in
  the text to a single elisp-file.

* Setup
  There is a Makefile that tangles everything that needs to be tangled.

  1. Clone this repository to =/.emacs.d/= (backup your own configuration first!)
  2. Modify code and module list in =README.org= (this file).
  3. Run ~make all~ in =~/.emacs.d/
  4. Profit!

* Initialization

  Before doing anything else, let us disable the garbage collector
  during setup, this saves us some time and we're not likely to run in
  to memory issues while setting everything up.

  #+begin_src emacs-lisp :tangle init.el
    (setq gc-cons-threshold 64000000)
    (add-hook 'after-init-hook #'(lambda ()
                                   ;; restore after startup
                                   (setq gc-cons-threshold 800000)))
  #+end_src

  Load the core configuration to setup stuff.

  #+begin_src emacs-lisp :tangle init.el
    ;; Load core setup file
    (load (concat user-emacs-directory "core.el"))
  #+end_src

* Personal customization
  Give my setup a personal touch.

  #+begin_src emacs-lisp :tangle init.el
     (setq user-full-name "Jacob Jonsson"
       user-mail-address "jacob.t.jonsson@gmail.com")
  #+end_src

  I don't like to type more than necessary, so why do I need to type
  1-2 extra letters when the first letter is enough?

  #+begin_src emacs-lisp :tangle init.el
     (fset 'yes-or-no-p 'y-or-n-p)
  #+end_src

  I've seen the splash screen enough times now, please don't show it
  to me anymore.

  #+begin_src emacs-lisp :tangle init.el
     (setq inhibit-splash-screen t)
  #+end_src

  Now that I'm trying out Dvorak (Svorak A5) these changes makes the
  transition between key layouts easier.

  #+begin_src emacs-lisp :tangle init.el
    ;; Bind C-z to C-x
    (global-set-key (kbd "C-z") ctl-x-map)

    ;; Bind C-h to previous-line since C-p is no longer on the same half
    ;; of the keyboard
    (global-set-key (kbd "C-x C-h") help-map)
    (global-set-key (kbd "C-h") 'previous-line)
  #+end_src

  I prefer to have my org files in my =~/personal=

  #+begin_src emacs-lisp :tangle init.el
    (setq org-directory (concat (expand-file-name "~") "/personal/"))
  #+end_src

  When modifying a file Emacs creates a hidden lock symlink pointing
  to the modified file. This is probably nice when you don't want to
  accidentally open an unsaved and modified file in another Emacs
  instance, but it also breaks tools that watches file modifications
  in a directory. Therefore I choose to disable it.

  #+begin_src emacs-lisp :tangle init.el
    (setq create-lockfiles nil)
  #+end_src

** Commands for local keymap

   This is a command for finding the init file, for the times I need
   to quickly edit my config for some reason. A command for editing
   and untangling the org file.

   #+begin_src emacs-lisp :tangle init.el
     (defun local--find-init-file ()
       "Find the init file."
       (interactive)
       (find-file (concat user-emacs-directory "init.el")))

     (defun local--find-org-file ()
       "Find the org file."
       (interactive)
       (find-file (concat user-emacs-directory "README.org")))

     (defun local--untangle-file ()
       "Run org-babel-tangle on the org file, updating the init file."
       (interactive)
       (org-babel-tangle-file (concat user-emacs-directory "README.org")))

     (defun local--eval-init-file ()
       "Evaluate the init file again to refresh Emacs."
       (interactive)
       (progn
         (local--untangle-file)
         (load-file (concat user-emacs-directory "init.el"))))
   #+end_src

   I have defined a keymap for commands that I'd like to execute as if
   they were defined in global keymap.

   #+begin_src emacs-lisp :tangle init.el
     (bind-keys :prefix-map my-local-map
                :prefix "M--"
                :prefix-docstring "Commands I like to access quicker than through M-x"
                ("g" . magit-status))


     (bind-keys :prefix-map my-local-project-map
                :prefix "M-- p"
                :prefix-docstring "Project related commands"
                ("d" . projectile-dired)
                ("b" . projectile-switch-to-buffer)
                ("p" . projectile-switch-project))

     (bind-keys :prefix-map my-local-config-map
                :prefix "M-- c"
                :prefix-docstring "Config related commands"
                ("f" . local--find-init-file)
                ("s" . local--find-org-file)
                ("t" . local--untangle-file)
                ("e" . local--eval-init-file))
   #+end_src

** External programs

   There are sometimes when I need to interact with external programs.
   For instance I sometimes like to open URL's in a more capable
   browser than EWW (even though it is very good!).

   Firefox is currently my driver of choice.

   #+begin_src emacs-lisp :tangle init.el
     (setq browse-url-browser-function 'browse-url-firefox
           browse-url-new-window-flag  t)
   #+end_src

** Visual appearance

   It is great that you can start out learning Emacs like a normal
   person, using the mouse and navigating through the menu and tool
   bar. However, on a smaller screen I find it a waste of screen
   space (especially since I don't use the mouse myself).

   #+begin_src emacs-lisp :tangle init.el
     (tool-bar-mode -1)
     (menu-bar-mode -1)
     (scroll-bar-mode -1)
   #+end_src

   I really like the =sanity-tomorrow-night= theme. It's a dark theme
   with good contrast and stuff.

   #+begin_src emacs-lisp :tangle init.el
     ;; Map over the list of packages and make sure they are installed
     (mapcar (lambda (pkg) (unless (package-installed-p pkg) (package-install pkg)))
             '(color-theme-sanityinc-tomorrow
               smart-mode-line
               smart-mode-line-atom-one-dark-theme))

     ;; Load theme
     (load-theme 'sanityinc-tomorrow-night t)
     ;; Setup modeline
     (require 'smart-mode-line)
     (require 'smart-mode-line-atom-one-dark-theme)
     (setq sml/theme 'atom-one-dark)
     (smart-mode-line-enable)
   #+end_src

   The fonts in =font-preferences= are the preferred fonts that I use
   on my system, in descending order. The first font that is available
   will be set as the main font for Emacs.

   #+begin_src emacs-lisp :tangle init.el
          (use-package cl-lib :ensure t)
          (defun font-existsp (font)
            "Check to see if the named FONT is available."
            (if (null (x-list-fonts font)) nil t))

          (defun font-avail (fonts)
            "Finds the available fonts."
            (cl-remove-if-not 'font-existsp fonts))

          (defvar font-preferences
            '( "Hasklig"
               "Inconsolata"
               "Fira Code"
               "Source Code Pro"
               "PragmataPro"))

          (unless (eq window-system nil)
            (let ((fonts (font-avail font-preferences)))
              (unless (null fonts) (progn
                  (set-face-attribute 'default nil :font (car fonts))
                  (set-face-attribute 'default nil :weight 'medium)))))
   #+end_src

   When using Hasklig we can have some degree of ligature support and
   this is configured below.

   #+begin_src emacs-lisp :tangle init.el
     (defun my-correct-symbol-bounds (pretty-alist)
       "Prepend a TAB character to each symbol in this alist,
     this way compose-region called by prettify-symbols-mode
     will use the correct width of the symbols
     instead of the width measured by char-width."
       (mapcar (lambda (el)
                 (setcdr el (string ?\t (cdr el)))
                 el)
               pretty-alist))

     (defun my-ligature-list (ligatures codepoint-start)
       "Create an alist of strings to replace with
     codepoints starting from codepoint-start."
       (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
         (-zip-pair ligatures codepoints)))

     ;; list can be found at https://github.com/i-tu/Hasklig/blob/master/GlyphOrderAndAliasDB#L1588
     (setq my-hasklig-ligatures
           (let* ((ligs '("&&" "***" "*>" "\\\\" "||" "|>" "::"
                          "==" "===" "==>" "=>" "=<<" "!!" ">>"
                          ">>=" ">>>" ">>-" ">-" "->" "-<" "-<<"
                          "<*" "<*>" "<|" "<|>" "<$>" "<>" "<-"
                          "<<" "<<<" "<+>" ".." "..." "++" "+++"
                          "/=" ":::" ">=>" "->>" "<=>" "<=<" "<->")))
             (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

     ;; nice glyphs for haskell with hasklig
     (defun my-set-hasklig-ligatures ()
       "Add hasklig ligatures for use with prettify-symbols-mode."
       (setq prettify-symbols-alist
             (append my-hasklig-ligatures prettify-symbols-alist))
       (prettify-symbols-mode))
   #+end_src

** Move to beginning of line

   [[http://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line][Source]]

   The default behaviour of calling =C-a= is to jump directly to the
   beginning of the line, although we probably would like to go to
   the beginning of the text on the line (and skip all the
   indentation whitespace).

   #+begin_src emacs-lisp :tangle init.el
     (defun local/smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

        Move point to the first non-whitespace character on this line.
        If point is already there, move to the beginning of the line.
        Effectively toggle between the first non-whitespace character and
        the beginning of the line.

        If ARG is not nil or 1, move forward ARG - 1 lines first.  If
        point reaches the beginning or end of the buffer, stop there."
        (interactive "^p")
        (setq arg (or arg 1))

        ;; Move lines first
        (when (/= arg 1)
          (let ((line-move-visual nil))
            (forward-line (1- arg))))

        (let ((orig-point (point)))
          (back-to-indentation)
          (when (= orig-point (point))
            (move-beginning-of-line 1))))

     ;; remap C-a to smarter-move-beginning-of-line
     (global-set-key [remap move-beginning-of-line]
                     'local/smarter-move-beginning-of-line)
   #+end_src

** EVIL mode

   I'm experimenting with EVIL mode in an attempt to learn Vi(m)
   keybindings. Since I am used to quitting and escaping stuff by
   =C-g= I want EVIL to transition to normal mode when I press =C-g=.

   #+begin_src emacs-lisp :tangle init.el
     (defun evil-keyboard-quit ()
       "Keyboard quit and force normal state."
       (interactive)
       (and evil-mode (evil-force-normal-state))
       (keyboard-quit))
   #+end_src

   When EVIL is loaded I therefore want bind =C-g= to my newly defined
   ~evil-keyboard-quit~.

   #+begin_src emacs-lisp :tangle init.el
     (use-package evil
       :bind
       (:map evil-normal-state-map   ("C-g" . #'evil-keyboard-quit))
       (:map evil-motion-state-map   ("C-g" . #'evil-keyboard-quit))
       (:map evil-motion-state-map   ("C-g" . #'evil-keyboard-quit))
       (:map evil-insert-state-map   ("C-g" . #'evil-keyboard-quit))
       (:map evil-window-map         ("C-g" . #'evil-keyboard-quit))
       (:map evil-operator-state-map ("C-g" . #'evil-keyboard-quit)))
** Distraction free writing

   Sometimes I just want to have my code (or whatever I'm currently
   reading or writing) presented to me without any other distractions
   and this is where =writeroom-mode= (found [[https://github.com/joostkremers/writeroom-mode][here]]) comes in to play.

   #+begin_src emacs-lisp :tangle init.el
     (use-package writeroom-mode :ensure t
       :init (setq writeroom-width 120)
       (add-hook 'writeroom-mode-hook (lambda () (display-line-numbers-mode -1)))
       :bind (:map writeroom-mode-map
                   ("C-c C-w <" . #'writeroom-decrease-width)
                   ("C-c C-w >" . #'writeroom-increase-width)
                   ("C-c C-w =" . #'writeroom-adjust-width)
                   ("s-?" . nil)
                   ("C-c C-w SPC" . #'writeroom-toggle-mode-line))
             (:map global-map
                   ("C-c C-M-w" . #'writeroom-mode)))
   #+end_src

* Modules
  These are the modules that are enabled. We store them in a separate
  file so that we can load it without loading everything.

  #+begin_src emacs-lisp :tangle modules.el
    ;; Enabled modules
    (setq
     enabled-modules '(
       ;; Coding
       ;;"csharp"
       "golang"
       "haskell"
       "org"
       "python"
       "web"
       ;;"mail"

       ;; Tools
       "erc"
       "git"
       "guide-key"
       "multiple-cursors"
       "pdf-tools"
       "project"
       "recentf"
       "smex"
       "undo-tree"
    ))
  #+end_src

  Therefore we have to load the module list and then load our modules
  before we let Emacs take over and start up everything else.

  #+begin_src emacs-lisp :tangle init.el
    (load (concat user-emacs-directory "modules.el"))
    (load-modules)
  #+end_src


* TODO Add linters and formatters to common-code-mode
  Variable =buffer-file-name= could be used together with a asynch
  shell command.
* TODO Add work configuration
  Add work config where browse-url opens links in Chrome etc.
* TODO Check out byte-compiled errors
  When the code is byte-compiled there are some stuff that is not
  found, might be worth investigating whether (eval-and-compile) works
  better.
* TODO Integrate better with Nix
  [[https://matthewbauer.us/bauer/#emacs][This]] is very interesting, maybe something I might take advantage of
  myself?
