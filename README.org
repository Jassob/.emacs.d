#+TITLE: Modules
#+AUTHOR: Jassob
#+DATE: <2018-07-29>

* About this file
  This file is intended to be the configurable point of my Emacs
  configuration. By enabling some modules we can create specific
  configurations for different use-cases.

  The complete configuration is very much inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's
  Emacs Configuration]], especially =org-mode=, with some stolen bits
  and pieces from both [[http://spacemacs.org][Spacemacs]]/[[https://github.com/TheBB/spaceline][Spaceline]] and [[https://github.com/hlissner/.emacs.d][hlissner's Emacs
  config]].

  This file generates my config by tangling all source code blocks in
  the text to a single elisp-file.

* Setup
  There is a Makefile that tangles everything that needs to be tangled.

  1. Clone this repository to =/.emacs.d/= (backup your own configuration first!)
  2. Modify =PERSONAL.org= and the module list in =README.org= (this file).
  3. Run ~make all~ in =~/.emacs.d/
  4. Profit!

* Config
  Load the core configuration and the personal configuration and then
  loads the specified modules.

  #+begin_src emacs-lisp :tangle init.el
    ;; Load core and personal setup
    ;; These two files are generated from CORE.org and PERSONAL.org
    (load (concat user-emacs-directory "core.el"))
    (load (concat user-emacs-directory "personal.el"))

    ;; Enabled modules
    (enable-modules
     ;; Coding
     "csharp"
     "golang"
     "haskell"
     "org"
     "python"
     "web"

     ;; Tools
     "erc"
     "git"
     "guide-key"
     "multiple-cursors"
     "pdf-tools"
     "project"
     "recentf"
     "smex"
     "undo-tree")
  #+end_src

* IN-PROGRESS Steal some kind of module system
  :LOGBOOK:
  - State "IN-PROGRESS" from "TODO"     [2018-07-29 s√∂n 16:12]
  :END:
  I want to be able to fire up a lightweight version of my emacs
  config that only includes a specific set of modules to speed up
  start up time.

** Proposal 1
   If I tangle the package-specific parts in the config to files that
   only contain what's needed for that package or mode then these
   files can be loaded by =init.el= depending on what modules I activate.

   If I expose the module activation mechanism in a good way it should
   be possible to customize that from nix-shell.

* TODO Add linters and formatters to common-code-mode
  Variable =buffer-file-name= could be used together with a asynch
  shell command.
