# -*- indent-tabs-mode: nil; -*-
#+TITLE: Haskell module
#+AUTHOR: Jassob
#+DATE: <2018-07-28>

* About this file
  This file contains the literate source of the Haskell module.

* Module
  Since Haskell is probably my most used language, this module is well
  used and has been iterated on a couple of times.

  I have recently come to the conclusion that I like to not have to
  think about code layout and formatting. =Brittany= is an opiniated
  Haskell formatter that solves the formatting for me and does a
  fairly good job.

  #+begin_src emacs-lisp :tangle module.el
    (defun haskell-format-code ()
      "Format Haskell buffer with brittany."
      (interactive)
      (when (eq major-mode 'haskell-mode)
        (save-buffer)
        (shell-command-to-string (format "brittany --write-mode inplace %s" buffer-file-name))))
  #+end_src

  Structuring haskell files as documented modules is good practice,
  although I don't remember doing it by myself so let us add functions
  that do this automatically in new files.

  #+begin_src emacs-lisp :tangle module.el
    (defun haskell-auto-insert-module-template ()
      "Insert a module template for the newly created buffer."
      (interactive)
      (when (and (= (point-min) (point-max))
                 (buffer-file-name))
        (let ((name (haskell-guess-module-name)))
          (insert "-- | " "\n" "module " name " where " "\n" "\n"))
        (goto-char (point-min))
        (forward-char 4)))
  #+end_src

  Undefined is a long and complicated word to type correctly and I
  write it a lot when coding Haskell so here is a shortcut for it.

  #+begin_src emacs-lisp :tangle module.el
    (defun haskell-insert-undefined ()
      "Insert undefined."
      (interactive)
      (insert "undefined"))
  #+end_src

  Next stop is to actually install and configure the modes and packages.

  #+begin_src emacs-lisp :tangle module.el
    (use-package dante :after haskell-mode :diminish t :ensure t
      :hook ((haskell-mode . dante-mode)
             (dante-mode . (lambda ()
                             (flycheck-add-next-checker 'haskell-dante
                                                        '(warning . haskell-hlint))
                             (add-to-list 'flycheck-disabled-checkers 'haskell-stack-ghc))))
      :config (setq dante-load-flags '("+c" "-Wall" "-fdefer-typed-holes"
                                       "-fdefer-type-errors"
                                       "-fno-diagnostics-show-caret")))

    (use-package haskell-mode
      :mode (("\\.hs\\'" . haskell-mode)
             ("\\.ghci\\'" . ghci-script-mode)
             ("\\.cabal\\'" . haskell-cabal-mode))
      :hook ((haskell-mode . common-code-mode)
             (haskell-mode . haskell-auto-insert-module-template)
             (haskell-mode . auto-revert-mode))
      :commands (haskell-interactive-bring
                 haskell-insert-doc
                 haskell-navigate-imports
                 haskell-doc-mode)
      :interpreter (("runghc" . haskell-mode)
                    ("runhaskell" . haskell-mode))
      :bind (:map haskell-mode-map
                  ("C-c C-." . pop-tag-mark)
                  ("C-c C-t" . haskell-process-do-type)
                  ("C-c c"   . haskell-process-cabal)
                  ("C-c C-c" . haskell-process-cabal-build)
                  ("C-c C-u" . haskell-insert-undefined)
                  ("C-c C-a" . haskell-insert-doc)
                  ("C-c C-f" . haskell-format-code)
                  ("C-c C-g" . haskell-navigate-imports)
                  ("C-c C-r" . haskell-navigate-imports-return))
      :config
      (require 'haskell-doc)
      (when (display-graphic-p)
                (let ((font (aref (query-font (face-attribute 'default :font)) 0)))
                  (if (or (string-match-p (regexp-quote "Hasklig") font)
                          (string-match-p (regexp-quote "Iosevka") font))
                      (progn
                        (setq haskell-font-lock-symbols nil)
                        (add-hook 'haskell-mode-hook 'local/set-hasklig-ligatures))
                    (setq haskell-font-lock-symbols 'unicode)))))
  #+end_src
