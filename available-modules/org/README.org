# -*- indent-tabs-mode: nil; -*-
#+TITLE: Org module
#+AUTHOR: Jassob
#+DATE: <2018-07-28>

* About this file
  This file contains the literate source of the Org module.

* Module
  [[http://orgmode.org][Org mode]] is the mode I use to organize my studies, my projects and
  my life in general. Much of this configuration is taken from Sacha
  Chua's Org configuration.

** Initialization

  Set some initialization options regarding time tracking.

  #+begin_src emacs-lisp :tangle module.el
    (use-package org :ensure t :defer t
      :bind
      ("C-c c"     . org-capture)
      ("C-c a"     . org-agenda)
      ("C-c l"     . org-store-link)
      ("C-c L"     . org-insert-link-global)
      ("C-c O"     . org-open-at-point-global)
      ("<f9> <f9>" . org-agenda-list)
      ("<f9> <f8>" . (lambda () (interactive) (org-capture nil "r")))
      :config
      (setq org-expiry-inactive-timestamps t
            org-clock-idle-time nil
            org-clock-continuously nil
            org-clock-persist t
            org-clock-in-switch-to-state "IN-PROGRESS"
            org-clock-in-resume nil
            org-log-note-clock-out t
            org-show-notification-handler 'message
            org-clock-report-include-clocking-task t)

      (org-clock-persistence-insinuate))
  #+end_src

  Put all org logs into a drawer.

  #+begin_src emacs-lisp :tangle module.el
    (with-eval-after-load 'org
      (setq org-log-into-drawer "LOGBOOK"
            org-clock-into-drawer t))

  #+end_src

** My files
   :PROPERTIES:
   :CUSTOM_ID: org-files
   :END:

   This is the structure of org files that I want to have and try to
   maintain.

   #<<org-files>>

   | organizer.org         | Main org file, used for org-capture and tasks etc             |
   | people.org            | People-related tasks                                          |
   | journal.org.gpg       | Journal entries (encrypted)                                   |
   | studies.org           | Chalmers-related tasks                                        |
   | reading.org           | Org file for book notes                                       |
   | watching.org          | Org file for stuff I'd like to watch                          |
   | calendar/personal.org | Events and todos from my calendar                             |
   | calendar/family.org   | Events and todos from my familys calendar                     |
   | calendar/spex.org     | Events and todos from the Chalmersspex Bob 2018 calendar      |
   | calendar/ensemble.org | Events and todos from the Ensemble 2018 calendar              |
   | calendar/theatre.org  | Events and todos from the practice schedule for Ensemble 2018 |
   | calendar/chalmers.org | Events and todos from my current Chalmers course schedule     |

** Modules

   There are a lot of modules that extend the core functionality of
   Org mode. This is the modules I personally use and find useful.

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
       (setq org-modules '(org-bbdb
                           org-bibtex
                           org-ctags
                           org-docview
                           org-eww
                           org-gnus
                           org-habit
                           org-info
                           org-irc
                           org-protocol
                           org-rmail
                           org-w3m))

       (org-load-modules-maybe t)

       ;; Export formats
       (setq org-export-backends '(org latex icalendar html ascii)))
   #+end_src

** Keyboard shortcuts

   Stacking killed content with =append-next-kill= is more useful
   than being able to copy a region in a table.

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
       (bind-keys
        :map org-mode-map
        ("C-M-w"    . append-next-kill)
        ("C-TAB"    . org-cycle)
        ("C-c v"    . org-show-todo-tree)
        ("C-c C-r"  . org-refile)
        ("C-c R"    . org-reveal)
        ("C-c o"    . local/org-follow-entry-link)))
   #+end_src

   Sometimes it could be good to be able to create links between
   tasks, if they for instance depend on each other. These functions
   enable me link tasks and to quickly jump between linked tasks.

   #+begin_src emacs-lisp :tangle module.el
     (defun local/org-follow-entry-link ()
       "Follow the defined link for this entry."
       (interactive)
       (if (org-entry-get (point) "LINK")
           (org-open-link-from-string (org-entry-get (point) "LINK"))
         (org-open-at-point)))

     (defun local/org-link-projects (location)
       "Add link properties between the current subtree and the one specified by LOCATION."
       (interactive
        (list (let ((org-refile-use-cache nil))
          (org-refile-get-location "Location"))))
       (let ((link1 (org-store-link nil)) link2)
         (save-window-excursion
           (org-refile 4 nil location)
           (setq link2 (org-store-link nil))
           (org-set-property "LINK" link1))
         (org-set-property "LINK" link2)))
   #+end_src

   To be able to clock in easily is more interesting than the diary.

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
         (bind-key "i" 'org-agenda-clock-in org-agenda-mode-map))
   #+end_src

   Killing and yanking subtrees.

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
       (bind-key "C-c k" 'org-cut-subtree org-mode-map)
       (setq org-yank-adjusted-subtrees t))
   #+end_src

   Speed commands are simple one-letter commands that are run on
   agenda entries. Used for instance to easily clock in or out on a
   the task at point.

   #+begin_src emacs-lisp :tangle module.el
     (defun local/org-use-speed-commands-for-headings-and-lists ()
     "Activate speed commands on list items too."
     (or (and (looking-at org-outline-regexp) (looking-back "^\**"))
         (save-excursion (and (looking-at (org-item-re)) (looking-back "^[ \t]*")))))

     (with-eval-after-load 'org
       (setq org-use-speed-commands 'local/org-use-speed-commands-for-headings-and-lists)

       (add-to-list 'org-speed-commands-user '("x" org-todo "DONE"))
       (add-to-list 'org-speed-commands-user '("y" org-todo-yesterday "DONE"))
       (add-to-list 'org-speed-commands-user '("!" local/org-clock-in-and-track))
       (add-to-list 'org-speed-commands-user '("s" call-interactively 'org-schedule))
       (add-to-list 'org-speed-commands-user '("i" call-interactively 'org-clock-in))
       (add-to-list 'org-speed-commands-user '("o" call-interactively 'org-clock-out))
       (add-to-list 'org-speed-commands-user '("$" call-interactively 'org-archive-subtree))
       (bind-key "!" 'local/org-clock-in-and-track org-agenda-mode-map))
   #+end_src

** Tasks and notes

   I store my org files in "~/personal/" which is a symlink
   to a directory in my Dropbox folder, so I can update it on
   multiple devices (possibly also org-mobile?).

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
       (setq org-directory (concat (file-name-as-directory (getenv "HOME"))
                                   (file-name-as-directory "personal"))
             org-default-notes-file (concat org-directory "organizer.org")
             org-refile-targets '((org-agenda-files :maxlevel . 6))))
   #+end_src

*** Todo states

    To keep track of my notes and tasks I add some states that my
    notes and tasks could be in. For instance in my reading file,
    items could be READ, READING or WANT-TO-READ. The letters inside
    the parantheses defines keyboard shortcuts that can be used for
    selecting the state of the item. The special characters ~@~ and
    ~!~ defines how logging should be performed. Changing the state
    of an item to a state with a ~@~ prompts you for a note and ~!~
    tells org that it should automatically log timestamp of the state
    change.

    #+begin_src emacs-lisp :tangle module.el
      (with-eval-after-load 'org
        (setq org-todo-keywords
              '((sequence "IDEAS(i)" "TODO(t)" "URGENT(u@/!)"
                          "IN-PROGRESS(p!/@)" "WAITING(w@/@)"
                          "|" "DONE(d@)" "CANCELLED(c@)")
                (sequence "WANT-TO-READ(@)" "READING(!)" "|" "READ(@)"))))
    #+end_src

*** Tag tasks

    Many GTD-apps organize the tasks into projects and contexts, this
    is of course doable inside =Org mode= as well.

    #+begin_src emacs-lisp :tangle module.el
      (with-eval-after-load 'org
        (setq org-tag-alist '(("@work" . ?w)
                              ("@study" . ?s)
                              ("@coding" . ?c)
                              ("@reading" . ?r)
                              ("@home" . ?h))))
    #+end_src

    I'll probably add some more when I have used this for a while.

*** Efforts

    Tasks in =Org mode= can be assigned an effort, so I can know how
    much I'll likely have to invest in a task. This is to help me
    prioritize what tasks that should be done.

    I think that this should make the efforts filterable, so that I
    can find short tasks to complete.

    #+begin_src emacs-lisp :tangle module.el
      (with-eval-after-load 'org
        (add-to-list 'org-global-properties
                     '("Effort_ALL". "0:05 0:15 0:30 1:00 2:00 3:00 4:00")))
    #+end_src

*** Estimating tasks

    From "Add an effort estimate on the fly when clocking in" on the
    [[http://orgmode.org/worg/org-hacks.html][Org Hacks]] page:

    #+begin_src emacs-lisp :tangle module.el
      (with-eval-after-load 'org
        (add-hook 'org-clock-in-prepare-hook
                  'local/org-mode-ask-effort))

      (defun local/org-mode-ask-effort ()
        "Ask for an effort estimate when clocking in."
        (unless (org-entry-get (point) "Effort")
          (let ((effort
                  (completing-read
                    "Effort: "
                    (org-entry-get-multivalued-property (point) "Effort"))))
            (unless (equal effort "")
              (org-set-property "Effort" effort)))))
    #+end_src

*** Habits

    org-habits is a module for =Org mode= that can be used for tasks
    that should be repeated on a regular basis. As such it is great
    to track consistency and create new habits.

    We want to show all habits, not just the ones for today.

    #+begin_src emacs-lisp :tangle module.el
      (with-eval-after-load 'org
        (setq org-habit-show-habits-only-for-today nil))
    #+end_src

*** Task dependencies

    If tasks depend on each other, make sure that their dependencies
    are enforced by =Org mode= and that this is clear when I show tasks.

    #+begin_src emacs-lisp :tangle module.el
      (with-eval-after-load 'org
        (setq org-enforce-todo-dependencies t
              org-track-ordered-properties-with-tag t
              org-agenda-dim-blocked-tasks t))
    #+end_src

** Structure templates

   You can easily insert blocks in =Org mode= by typing ~<~ followed
   by a letter in ~org-structure-template-alist~ and then pressing the TAB key.
   So lets customize this alist a bit.

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
       (setq org-structure-template-alist
             '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
             ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
             ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
             ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
             ("c" "#+BEGIN_COMMENT\n?\n#+END_COMMENT")
             ("p" "#+BEGIN_PRACTICE\n?\n#+END_PRACTICE")
             ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
             ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
             ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
             ("H" "#+html: " "<literal style=\"html\">?</literal>")
             ("a" "#+begin_ascii\n?\n#+end_ascii")
             ("A" "#+ascii: ")
             ("i" "#+index: ?" "#+index: ?")
             ("I" "#+include %file ?" "<include file=%file markup=\"?\">"))))
   #+end_src

** Org Capture templates

   I want to start using =org-capture= to quickly add tasks and notes
   and organize them in my life. First we define some handy templates
   for more advanced capture types, like reading stuff and so
   on.

   #+begin_src emacs-lisp :tangle module.el
    (defvar local/org-basic-task-template "* TODO %^{Task}
      :PROPERTIES:
      :Effort: %^{effort|1:00|0:05|0:15|0:30|2:00|4:00}
      :END:
      Captured %<%Y-%m-%d %H:%M>
      %?

      %i\n"
      "Basic task data.")

    (defvar local/org-book-template "* WANT-TO-READ %^{Title}  %^g

      %i%?

      *Author(s)*: %^{Author}
      *Review on:* %^t
      %a %U\n"
      "Book template.")

    (defvar local/org-article-template "* WANT-TO-READ %^{Title}  %^g

      *Author(s)*: %^{Author}

      *Abstract*: %i%?

      [[%l][Link to paper]]\n"
      "Article template.")

    (defvar local/org-blog-post-template "* WANT-TO-READ %^{Title}  %^g

      %i

      *Author(s)*: %^{Author}

      [[%l][Link to blog post]]\n"
      "Blog post template.")
   #+end_src

   Quick legend of the template escape codes:
   - ~%^{PROMPT}~ - Org will prompt me with "PROMPT: " and the input
     will replace the occurrance of ~%^{Task}~ in the template,
   - ~%?~ - Org will put the cursor here so I can edit the capture
     before refiling it,
   - ~%i~ - Org will insert the marked region from before the capture
     here,
   - ~%a~ - Org will insert an annotation here (,
   - ~%U~ - Org will insert an inactive timestamp here,
   - ~%l~ - Org will insert a literal link here,

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
       (setq org-capture-templates
             `(("t" "Tasks" entry
                (file+headline ,org-default-notes-file "Inbox")
                ,local/org-basic-task-template)

               ("tD" "Done - Task" entry
                (file+headline ,org-default-notes-file "Inbox")
                "* DONE %^{Task}\nSCHEDULED: %^t\n%?")

               ("T" "Quick task" entry
                (file+headline ,org-default-notes-file "Inbox")
                "* TODO %^{Task}\nSCHEDULED: %t\n" :immediate-finish t)

               ("i" "Interrupting task" entry
                (file+headline ,org-default-notes-file "Inbox")
                "* IN-PROGRESS %^{Task}\n" :clock-in :clock-resume)

               ("P" "People task" entry
                (file+headline ,(concat org-directory "people.org") "Tasks")
                ,local/org-basic-task-template)

               ("j" "Journal entry" plain
                (file+datetree ,(concat org-directory "journal.org.gpg"))
                "%K - %a\n%i\n%?\n" :unnarrowed t)

               ("J" "Journal entry with date" plain
                (file+datetree+prompt ,(concat org-directory "journal.org.gpg"))
                "%K - %a\n%i\n%?\n" :unnarrowed t)

               ("s" "Journal entry with date, scheduled" entry
                (file+datetree+prompt ,(concat org-directory "journal.org.gpg"))
                "* \n%K - %a\n%t\t%i\n%?\n" :unnarrowed t)

               ("Pd" "Done - People" entry
                (file+headline ,(concat org-directory "people.org") "Tasks")
                "* DONE %^{Task}\nSCHEDULED: %^t\n%?\n")

               ("q" "Quick note" item
                (file+headline ,org-default-notes-file "Quick notes"))

               ("B" "Book" entry
                (file+headline ,(concat org-directory "reading.org") "Books")
                ,local/org-book-template :clock-resume)

               ("A" "Article" entry
                (file+headline ,(concat org-directory "reading.org") "Articles")
                ,local/org-article-template :clock-resume)

               ("p" "Blog post" entry
                (file+headline ,(concat org-directory "reading.org") "Blog entries")
                ,local/org-blog-post-template :clock-resume)

               ("l" "Bookmark" entry
                (file+headline ,(concat org-directory "bookmarks.org")
                               "Captured entries")
                "* [[%^{Link}][%^{Title}]]\n\n%i%?\n")

               ("n" "Daily note" table-line
                (file+olp ,org-default-notes-file "Inbox")
                "| %u | %^{Note} |\n" :immediate-finish t)

               ("r" "Notes" entry
                (file+datetree ,org-default-notes-file)
                "* %?\n\n%i\n%U\n")

               ;; Org protocol handlers
               ("p" "Protocol" entry
                (file+headline ,(concat org-directory "notes.org") "Inbox")
                "* %^{Title}\nSource: %u, %c\n #+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n\n%?\n")

               ("c" "Protocol Link" entry (file+headline ,org-default-notes-file "Inbox")
                "* [[%:link][%:description]] \n\n#+BEGIN_QUOTE\n%i\n#+END_QUOTE\n\n%?\n\nCaptured: %U\n")

               ("L" "Protocol Link" entry
                (file+headline ,(concat org-directory "notes.org") "Inbox")
                "* %? [[%:link][%:description]] \nCaptured On: %U\n")))

       (bind-key "C-M-r" 'org-capture))
   #+end_src

** Org agenda
*** Basic configuration

    I like to show ordinary txt files as =Org mode= files.

    #+begin_src emacs-lisp :tangle module.el
      (add-to-list 'auto-mode-alist '("\\.txt$" . org-mode))
    #+end_src

    This is the org files in which I keep agenda items and todos.

    #+begin_src emacs-lisp :tangle module.el
      (defun local/existing-files-in-dir (dir files)
        "Return all files from the list FILES that exists in directory DIR."
        (delq nil (mapcar
                   (lambda (file) (let ((path (concat dir file)))
                                    (and (file-exists-p path) path)))
                   files)))

      (with-eval-after-load 'org
        (setq org-agenda-files
              (local/existing-files-in-dir
               org-directory
               '("organizer.org"
                 "people.org"
                 "bookmarks.org"
                 "studies.org"
                 "reading.org"
                 "work.org"

                 ;; Calendar files (synced with org-gcal)
                 "calendar/family.org"
                 "calendar/personal.org"
                 "calendar/spex.org"
                 "calendar/ensemble.org"
                 "calendar/chalmers.org"
                 "calendar/theatre.org"
               ))))
    #+end_src

    We want the agenda to show us a time grid and the log entries. We
    also want the agenda to hide finished items, even if they are
    scheduled.

    #+begin_src emacs-lisp :tangle module.el
      (with-eval-after-load 'org
        (setq org-agenda-tags-column -100
            org-agenda-sticky nil
            org-agenda-use-tag-inheritance t
            org-agenda-show-log t
            org-agenda-skip-scheduled-if-done t
            org-agenda-skip-deadline-if-done t
            org-agenda-skip-scheduled-if-deadline-is-shown 'not-today
            org-agenda-skip-deadline-prewarning-if-scheduled nil
            org-agenda-time-grid
            '((daily today require-timed)
              (800 1000 1200 1400 1600 1800 2000)
              "......"
              "----------------")
            org-columns-default-format "14%DEADLINE %Effort{:} %CLOCKSUM %1PRIORITY %TODO %50ITEM %TAGS"))
    #+end_src

    Sometimes I want to be able to exclude stuff from the agenda view,
    like for instance courses that I havn't finished but plan to
    finish another time.

    =local/org-auto-exclude-function= excludes entries based on their
    tag, in this case it hides todos tagged with "net" if the network
    is down, errands and calls are hidden during non-work time and
    inactive tasks are always hidden.

    #+begin_src emacs-lisp :tangle module.el
      (defun local/org-auto-exclude-function (tag)
        (and (cond
              ((string= tag "net")
               (/= 0 (call-process "/sbin/ping" nil nil nil
                                   "-c1" "-q" "-t1" "mail.gnu.org")))
              ((or (string= tag "Errand") (string= tag "Call"))
               (let ((hour (nth 2 (decode-time))))
                 (or (< hour 8) (> hour 21))))
              ((string= tag "inactive")
               t))
             (concat "-" tag)))

      (setq org-agenda-auto-exclude-function 'local/org-auto-exclude-function)
    #+end_src
*** TODO Fix so that entries completed @ 01 is counted as yesterday.
** Publishing

   I want to be able to view my org documents so that I can see my
   progress and what I've got left to do and so on. Org publish works
   rather well for this scenario, even though I probably would like
   do some automation on when it does the publishing.

   #+begin_src emacs-lisp :tangle module.el
     (with-eval-after-load 'org
       (require 'ox-html)
       (setq org-publish-project-alist
             `(("html"
                :base-directory ,org-directory
                :base-extension "org"
                :publishing-directory "/ssh:jassob:/var/www/org"
                :recursive t
                :publishing-function org-html-publish-to-html)

               ("org-static"
                :base-directory ,org-directory
                :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
                :publishing-directory "/ssh:jassob:/var/www/org"
                :recursive t
                :publishing-function org-publish-attachment)

               ("archive"
                :base-directory ,org-directory
                :base-extension "org_archive"
                :publishing-directory "/ssh:jassob:/var/www/org/archive"
                :publishing-function org-html-publish-to-html)

               ("web"
                :base-directory ,(concat org-directory "web/")
                :base-extension "org"
                :publishing-directory "/ssh:jassob:/var/www/"
                :publishing-function org-html-publish-to-html)

               ("jassob" :components ("html" "archive" "org-static" "web"))
               ("all" :components ("jassob"))))

       (defun local/publish-jassob ()
         "Publishes \"jassob\" project"
         (interactive)
         (org-publish "jassob" t))

       (defun local/publish-chalmers ()
         "Publishes \"chalmers\" project"
         (interactive)
         (org-publish "chalmers" t))

       (defun local/publish-web ()
         "Publishes \"web\" project"
         (interactive)
         (org-publish "web" t)))
   #+end_src
