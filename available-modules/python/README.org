# -*- indent-tabs-mode: nil; -*-
#+TITLE: Python module
#+AUTHOR: Jassob
#+DATE: <2018-07-28>

* About this file
  This file contains the literate source of the Python module.

* Module
  When programming in Python I want the same tooling as I have when
  programming Haskell. Thanks to company and flycheck, I get some
  helpful information about the code.

  #+begin_src emacs-lisp :tangle module.el
     (use-package python-mode :commands python-mode :ensure t
       :init
       (add-hook 'python-mode-hook 'common-code-mode)
       (add-hook 'python-mode-hook
                 (lambda ()
                   (setq tab-width 4)
                   (setq python-indent-offset 4)
                   (setq indent-tabs-mode nil)))
       :bind
       (:map python-mode-map
             ("C-<backspace>" . backward-kill-word))

       :config
       (setq python-environment-directory cache-dir
             python-indent-guess-indent-offset-verbose nil
             python-shell-interpreter "python")
       (when (executable-find "ipython")
         (setq python-shell-interpreter "ipython"
               python-shell-interpreter-args "-i --simple-prompt --no-color-info"
               python-shell-prompt-regexp "In \\[[0-9]+\\]: "
               python-shell-prompt-block-regexp "\\.\\.\\.\\.: "
               python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
               python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
               python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))

       (sp-with-modes 'python-mode
         (sp-local-pair "'" nil :unless
                        '(sp-point-before-word-p sp-point-after-word-p
                                                 sp-point-before-same-p))))
  #+end_src

  As a Haskell-programmer I enjoy having the tools checking my types
  for me and since Python 3.5 they added support for type hints in
  Python. [[http://mypy-lang.org/][Mypy]] is a type checker for python and [[https://github.com/lbolla/emacs-flycheck-mypy][flycheck-mypy]] is an
  Flycheck interface for said type checker.

  #+begin_src emacs-lisp :tangle module.el
     (use-package flycheck-mypy :ensure t :after flycheck :after python
       :init
       (add-to-list 'flycheck-disabled-checkers 'python-flake8)
       (add-to-list 'flycheck-disabled-checkers 'python-pylint)
       (add-to-list 'flycheck-disabled-checkers 'python-pycompile))
       (setq flycheck-python-mypy-args '("--ignore-missing-imports"))
  #+end_src


  It is a convention to store a list of required dependencies in a
  file called =requirements.txt=, which can easily be installed by
  pip with the command

  #+begin_src bash
   $ pip install -r requirements.txt
  #+end_src

  To generate a fresh version of requirements.txt we run

  #+begin_src bash
   $ pip freeze > requirements.txt
  #+end_src

  There exists an Emacs mode for the requirement-file-format in pip.

   #+begin_src emacs-lisp :tangle module.el
     (use-package pip-requirements :ensure t
       :mode ("/requirements.txt$" . pip-requirements-mode))
   #+end_src
