# -*- indent-tabs-mode: nil; -*-
#+TITLE: Haskell module
#+AUTHOR: Jassob
#+DATE: <2018-07-28>

* About this file
  This file contains the literate source of the Haskell module.

* Module
  Since Haskell is probably my most used language, this module is well
  used and has been iterated on a couple of times.

  Structuring haskell files as documented modules is good practice,
  although I don't remember doing it by myself so let us add functions
  that do this automatically in new files.

  #+begin_src emacs-lisp :tangle module.el
    (defun haskell-auto-insert-module-template ()
      "Insert a module template for the newly created buffer."
      (interactive)
      (when (and (= (point-min)
                    (point-max))
                 (buffer-file-name))
        (insert "-- | "
                "\n"
                "module ")
        (let ((name (haskell-guess-module-name)))
          (if (string= name "")
              (progn (insert "Main")
                     (shm-evaporate (- (point) 5)
                                    (point)))
            (insert name)))
        (insert " where"
                "\n"
                "\n")
        (goto-char (point-min))
        (forward-char 4)
        (god-mode)))
  #+end_src

  Undefined is a long and complicated word to type correctly and I
  write it a lot when coding Haskell so here is a shortcut for it.

  #+begin_src emacs-lisp :tangle module.el
    (defun haskell-insert-undefined ()
      "Insert undefined."
      (interactive)
      (insert "undefined"))
  #+end_src

  Next stop is to actually install and configure the modes and packages.

  #+begin_src emacs-lisp :tangle module.el
    (use-package haskell-mode
      :mode "\\.hs$"
      :mode ("\\.ghci$ . ghci-script-mode")
      :mode ("\\.cabal$ . haskell-cabal-mode")
      :interpreter (("runghc" . haskell-mode)
                    ("runhaskell" . haskell-mode))
      :bind
      (:map haskell-mode-map
            ("C-`"     . haskell-interactive-bring)
            ("C-c C-r" . xref-find-references)
            ("C-c C-," . xref-find-definitions)
            ("C-c C-." . pop-tag-mark)
            ("C-c C-t" . haskell-process-do-type)
            ("C-c c"   . haskell-process-cabal)
            ("C-c C-c" . haskell-process-cabal-build)
            ("C-c C-u" . haskell-insert-undefined)
            ("C-c C-a" . haskell-insert-doc))
      :config
      (add-hook 'haskell-mode-hook 'common-code-mode)
      (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
      (add-hook 'haskell-mode-hook 'haskell-auto-insert-module-template)

      (if (string-match-p (regexp-quote "Hasklig")
                          (aref (query-font (face-attribute 'default :font)) 0))
          (progn
            (setq haskell-font-lock-symbols nil)
            (add-hook 'haskell-mode-hook 'my-set-hasklig-ligatures))
        (setq haskell-font-lock-symbols 'unicode)))

    (use-package dante :after haskell-mode :diminish t
      :init
      (if (executable-find "cabal")
          (progn
            (add-hook 'haskell-mode-hook 'dante-mode))
        (warn "haskell-mode: couldn't find cabal"))
      :config
      (setq dante-load-flags '("+c" "-Wall"
                               "-Wwarn=missing-home-modules"
                               "-fno-diagnostics-show-caret"))
      (add-hook 'dante-mode-hook
                (lambda ()
                  (flycheck-add-next-checker 'haskell-dante
                                             '(warning . haskell-hlint))
                  (add-to-list 'flycheck-disabled-checkers 'haskell-stack-ghc)))

      ;; Find out the right repl to use from what files exists in project root.
      (setq-default dante-repl-command-line-methods-alist
                    `((styx . ,(lambda (root)
                                 (dante-repl-by-file root '("styx.yaml")
                                                     '("styx" "repl"))))
                      (nix-new . ,(lambda (root)
                                    (dante-repl-by-file
                                     (projectile-project-root)
                                     '("shell.nix" "default.nix")
                                     `("nix-shell" "--run" "cabal new-repl"
                                       ,(concat (projectile-project-root) "/shell.nix")))))
                      (stack . ,(lambda (root)
                                  (dante-repl-by-file root '("stack.yaml")
                                                      '("stack" "repl"))))
                      (bare  . ,(lambda (_) '("cabal" "repl"))))))
  #+end_src
